{
  "contracts": {
    "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
      "ReentrancyGuard": {
        "abi": [],
        "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {}
        },
        "irOptimized": ""
      }
    },
    "src/Cross-Function/Attack.sol": {
      "Attack": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "contract CrossFunction",
                "name": "_crossFunction",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_owner",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "inputs": [],
            "name": "AMOUNT",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "deposit",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "stateMutability": "payable",
            "type": "receive"
          }
        ],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "jump_table_density_threshold": null,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract CrossFunction\",\"name\":\"_crossFunction\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Cross-Function/Attack.sol\":\"Attack\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"src/Cross-Function/Attack.sol\":{\"keccak256\":\"0x5849b6b768394762fd7f4abfbb3323c54bee520e71fb33e5a6cf7534188afb48\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://9c9295ad9561ffc08b8e77f553d541761e04f52f4ae24a5f356f61a697ccad41\",\"dweb:/ipfs/QmZHCFk3Nt3Dj9pPoLGi753w2Z4mGnvu89D4t1w1MtavaM\"]},\"src/Cross-Function/CrossFunction.sol\":{\"keccak256\":\"0x69a1c8e19456b3794a9e30e463ad03e69902626899fe1eef54a7aa557b72e459\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://0e31f48aa606aeab2c638cff419ca94885df799c0584431f71be5ae898feafb4\",\"dweb:/ipfs/QmQ7F2WJGxDeQVBScebHrFxD1AWVrvK5ezEHEBPtLJtq85\"]}},\"version\":1}",
          "solc_version": "0.8.18",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.1"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"Attack.sol:Attack\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[2]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_15\n\tld\tr1, r1\n\tshr.s\t224, r1, r1\n\tsub.s!\t@CPI0_5[0], r1, r2\n\tjump.eq\t@.BB0_16\n\tsub.s!\t@CPI0_6[0], r1, r2\n\tjump.eq\t@.BB0_28\n\tsub.s!\t@CPI0_7[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_8[0], r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_9[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t31, r3, r2\n\tand\t@CPI0_1[0], r2, r2\n\tadd\t128, r2, r2\n\tst.1\t64, r2\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tjump.eq\t@.BB0_46\n\tadd\tr0, r0, r5\n.BB0_5:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t128, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_5\n.BB0_46:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_7\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r2, r2\n\tadd\t128, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_7:\n\tsub.s!\t64, r3, r1\n\tjump.lt\t@.BB0_2\n\tld.1\t128, r1\n\tsub.s!\t@CPI0_2[0], r1, r2\n\tjump.gt\t@.BB0_2\n\tld.1\t160, r2\n\tsub.s!\t@CPI0_2[0], r2, r3\n\tjump.gt\t@.BB0_2\n\tsload\tr0, r3\n\tand\t@CPI0_3[0], r3, r3\n\tor\tr3, r1, r1\n\tsstore\tr0, r1\n\tadd\t1, r0, r1\n\tsload\tr1, r3\n\tand\t@CPI0_3[0], r3, r3\n\tor\tr3, r2, r2\n\tsstore\tr1, r2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_4[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_15:\n\tsub!\tr3, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_28:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t@CPI0_10[0], r1, r1\n\tjump.gt\t@.BB0_30\n\tadd\t@CPI0_18[0], r0, r1\n\tst.1\t128, r1\n\tadd\t32, r0, r1\n\tst.1\t132, r1\n\tadd\t19, r0, r1\n\tst.1\t164, r1\n\tadd\t@CPI0_19[0], r0, r1\n\tst.1\t196, r1\n\tadd\t@CPI0_20[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_16:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\tr4, r0, stack-[2]\n\tsload\tr0, r1\n\tadd\t@CPI0_11[0], r0, r2\n\tst.2\t0, r2\n\tand\t@CPI0_2[0], r1, r1\n\tadd\tr1, r0, stack-[1]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_12[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_18\n\tadd\tstack-[1], r0, r2\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tadd\tstack-[2], r0, r3\n\tjump.eq\t@.BB0_2\n\tadd\t@CPI0_21[0], r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_8[0], r0, r1\n\tst.1\t132, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r2, r4\n\tjump.eq\t@.BB0_27\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_22[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_22\n.BB0_27:\n\tst.1\t64, r3\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_30:\n\tsload\tr0, r1\n\tadd\t@CPI0_11[0], r0, r2\n\tst.2\t0, r2\n\tand\t@CPI0_2[0], r1, r1\n\tadd\tr1, r0, stack-[2]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_12[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_18\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_32\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_18:\n\trevert\n.BB0_32:\n\tld.1\t64, r5\n\tadd\t@CPI0_13[0], r0, r1\n\tst.1\tr5, r1\n\tcontext.gas_left\tr1\n\tadd\tstack-[2], r0, r4\n\tsub.s!\t4, r4, r2\n\tjump.eq\t@.BB0_38\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r5, r3\n\tadd.lt\tr5, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_14[0], r1, r1\n\tadd\t32777, r0, r2\n\tadd\t@CPI0_8[0], r0, r3\n\tadd\tr5, r0, stack-[2]\n\tadd\tr0, r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r5\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_34\n.BB0_38:\n\tsub.s!\t@CPI0_15[0], r5, r1\n\tjump.lt\t@.BB0_40\n\tadd\t@CPI0_16[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_17[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_40:\n\tst.1\t64, r5\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_34:\n\tld.1\t64, r2\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t31, r3, r4\n\tand\t@CPI0_0[0], r3, r3\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_45\n\tadd\tr0, r0, r6\n.BB0_36:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_36\n.BB0_45:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_26\n\tjump\t@.BB0_25\n.BB0_22:\n\tld.1\t64, r2\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t31, r3, r4\n\tand\t@CPI0_0[0], r3, r3\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_44\n\tadd\tr0, r0, r6\n.BB0_24:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_24\n.BB0_44:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_26\n.BB0_25:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_26:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n__cxa_throw:\n.func_begin1:\n\trevert\n.func_end1:\n\n__farcall:\n.func_begin2:\n.tmp0:\n\tfar_call\tr1, r2, @.BB2_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB2_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB3_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 8589934560\nCPI0_2:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_3:\n\t.cell -1461501637330902918203684832716283019655932542976\nCPI0_4:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_5:\n\t.cell 1020253707\nCPI0_6:\n\t.cell 3504541104\nCPI0_7:\n\t.cell 3514339702\nCPI0_8:\n\t.cell 1000000000000000000\nCPI0_9:\n\t.cell 2535301202817642044428229017600\nCPI0_10:\n\t.cell 999999999999999999\nCPI0_11:\n\t.cell 10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_12:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_13:\n\t.cell -21309847980638971703262310643239475302609402855662783671738718606739973865472\nCPI0_14:\n\t.cell 904625697166532776746648320380374280103671755517229556615319725435997126656\nCPI0_15:\n\t.cell 18446744073709551616\nCPI0_16:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_17:\n\t.cell 2852213850513516153367582212096\nCPI0_18:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_19:\n\t.cell 34943453894732940338004209556353137639755494225045631181017527175008770588672\nCPI0_20:\n\t.cell 7922816253787617000789217640448\nCPI0_21:\n\t.cell 20853193852723734048814770637610870652489083209607696777694672748161462697984\nCPI0_22:\n\t.cell 2852213852874699394802404818944\n",
          "bytecode": {
            "object": "00020000000000020000000003010019000000600330027000000044033001970000000102200190000000190000c13d0000008004000039000000400040043f000000040230008c000000510000413d000000000101043b000000e001100270000000490210009c000000620000613d0000004a0210009c000000550000613d0000004b0110009c000000a10000c13d0000000001000416000000000101004b000000a10000c13d0000004c01000041000000800010043f0000004d010000410000010c0001042e0000000002000416000000000202004b000000a10000c13d0000001f0230003900000045022001970000008002200039000000400020043f0000001f0230018f00000005043002720000002c0000613d00000000050000190000000506500210000000000761034f000000000707043b000000800660003900000000007604350000000105500039000000000645004b000000240000413d000000000502004b0000003b0000613d0000000504400210000000000141034f00000003022002100000008004400039000000000504043300000000052501cf000000000525022f000000000101043b0000010002200089000000000121022f00000000012101cf000000000151019f0000000000140435000000400130008c000000a10000413d000000800100043d000000460210009c000000a10000213d000000a00200043d000000460320009c000000a10000213d000000000300041a0000004703300197000000000113019f000000000010041b0000000101000039000000000301041a0000004703300197000000000223019f000000000021041b00000020010000390000010000100443000001200000044300000048010000410000010c0001042e000000000103004b000000a10000c13d00000000010000190000010c0001042e00000000010004160000004e0110009c0000008e0000213d0000005601000041000000800010043f0000002001000039000000840010043f0000001301000039000000a40010043f0000005701000041000000c40010043f00000058010000410000010d000104300000000001000416000000000101004b000000a10000c13d000200000004001d000000000100041a0000004f0200004100000000002004390000004601100197000100000001001d000000040010044300000044010000410000000002000414000000440320009c0000000002018019000000c00120021000000050011001c70000800202000039010b01060000040f0000000102200190000000a30000613d0000000102000029000000000101043b000000000101004b0000000203000029000000a10000613d0000005901000041000000800010043f0000004c01000041000000840010043f0000000001000414000000040420008c0000008b0000613d0000004404000041000000440310009c0000000001048019000000c0011002100000005a011001c7010b01010000040f00000002030000290000000102200190000000da0000613d000000400030043f00000000010000190000010c0001042e000000000100041a0000004f0200004100000000002004390000004601100197000200000001001d000000040010044300000044010000410000000002000414000000440320009c0000000002018019000000c00120021000000050011001c70000800202000039010b01060000040f0000000102200190000000a30000613d000000000101043b000000000101004b000000a40000c13d00000000010000190000010d00010430000000000001042f000000400500043d0000005101000041000000000015043500000000010004140000000204000029000000040240008c000000bc0000613d0000004402000041000000440310009c0000000001028019000000440350009c00000000020540190000004002200210000000c001100210000000000121019f00000052011001c700008009020000390000004c03000041000200000005001d0000000005000019010b01010000040f00000002050000290000000102200190000000c70000613d000000530150009c000000c40000413d000000540100004100000000001004350000004101000039000000040010043f00000055010000410000010d00010430000000400050043f00000000010000190000010c0001042e000000400200043d000000000301001900000060033002700000001f0430018f00000044033001970000000505300272000000d70000613d000000000600001900000005076002100000000008720019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b000000cf0000413d000000000604004b000000f90000613d000000ec0000013d000000400200043d000000000301001900000060033002700000001f0430018f00000044033001970000000505300272000000ea0000613d000000000600001900000005076002100000000008720019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b000000e20000413d000000000604004b000000f90000613d0000000505500210000000000151034f00000000055200190000000304400210000000000605043300000000064601cf000000000646022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000161019f00000000001504350000004401000041000000440420009c000000000201801900000040012002100000006002300210000000000121019f0000010d00010430000000000001042f00000104002104210000000102000039000000000001042d0000000002000019000000000001042d00000109002104230000000102000039000000000001042d0000000002000019000000000001042d0000010b000004320000010c0001042e0000010d000104300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000000000001ffffffe0000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000200000000000000000000000000000040000001000000000000000000000000000000000000000000000000000000000000000000000000003ccfd60b00000000000000000000000000000000000000000000000000000000d0e30db000000000000000000000000000000000000000000000000000000000d17891760000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000200000008000000000000000000000000000000000000000000000000000000000000000000de0b6b3a763ffff1806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b830200000200000000000000000000000000000024000000000000000000000000d0e30db000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000100000000000000004e487b7100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000008c379a0000000000000000000000000000000000000000000000000000000004d414b4520454e4f554748204465504f5349540000000000000000000000000000000000000000000000000000000000000000640000008000000000000000002e1a7d4d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000080000000000000000000000000000000000000000000000000000000000000000000000000000000006c97790d75692fa8987c4409680558c367cda863716cef18f08c0cc5e2ad7380"
          },
          "methodIdentifiers": {
            "AMOUNT()": "d1789176",
            "deposit()": "d0e30db0",
            "withdraw()": "3ccfd60b"
          }
        },
        "irOptimized": "/// @use-src 1:\"src/Cross-Function/Attack.sol\"\nobject \"Attack_102\" {\n    code {\n        {\n            /// @src 1:115:796  \"contract Attack {...\"\n            let _1 := memoryguard(0x80)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"Attack_102\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:115:796  \"contract Attack {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 1:115:796  \"contract Attack {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), 64)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 1:115:796  \"contract Attack {...\"\n            let value := mload(_1)\n            let _2 := sub(shl(160, 1), 1)\n            let _3 := and(value, _2)\n            if iszero(eq(value, _3))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 1:115:796  \"contract Attack {...\"\n            let value_1 := mload(add(_1, 32))\n            let _4 := and(value_1, _2)\n            if iszero(eq(value_1, _4))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 1:115:796  \"contract Attack {...\"\n            let _5 := not(sub(shl(160, 1), 1))\n            sstore(/** @src -1:-1:-1 */ 0, /** @src 1:115:796  \"contract Attack {...\" */ or(and(sload(/** @src -1:-1:-1 */ 0), /** @src 1:115:796  \"contract Attack {...\" */ _5), _3))\n            sstore(/** @src 1:345:359  \"owner = _owner\" */ 0x01, /** @src 1:115:796  \"contract Attack {...\" */ or(and(sload(/** @src 1:345:359  \"owner = _owner\" */ 0x01), /** @src 1:115:796  \"contract Attack {...\" */ _5), _4))\n            let _6 := mload(64)\n            let _7 := datasize(\"Attack_102_deployed\")\n            codecopy(_6, dataoffset(\"Attack_102_deployed\"), _7)\n            return(_6, _7)\n        }\n    }\n    /// @use-src 1:\"src/Cross-Function/Attack.sol\"\n    object \"Attack_102_deployed\" {\n        code {\n            {\n                /// @src 1:115:796  \"contract Attack {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0x3ccfd60b {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let value := and(sload(_3), sub(shl(160, 1), 1))\n                        /// @src 1:569:599  \"crossFunction.withdraw(AMOUNT)\"\n                        if iszero(extcodesize(value))\n                        {\n                            /// @src 1:115:796  \"contract Attack {...\"\n                            revert(_3, _3)\n                        }\n                        /// @src 1:569:599  \"crossFunction.withdraw(AMOUNT)\"\n                        mstore(_1, /** @src 1:115:796  \"contract Attack {...\" */ shl(224, 0x2e1a7d4d))\n                        mstore(/** @src 1:569:599  \"crossFunction.withdraw(AMOUNT)\" */ add(_1, /** @src 1:115:796  \"contract Attack {...\" */ 4), /** @src 1:204:211  \"1 ether\" */ 0x0de0b6b3a7640000)\n                        /// @src 1:569:599  \"crossFunction.withdraw(AMOUNT)\"\n                        let _4 := call(gas(), value, /** @src 1:115:796  \"contract Attack {...\" */ _3, /** @src 1:569:599  \"crossFunction.withdraw(AMOUNT)\" */ _1, /** @src 1:115:796  \"contract Attack {...\" */ 36, /** @src 1:569:599  \"crossFunction.withdraw(AMOUNT)\" */ _1, /** @src 1:115:796  \"contract Attack {...\" */ _3)\n                        /// @src 1:569:599  \"crossFunction.withdraw(AMOUNT)\"\n                        if iszero(_4)\n                        {\n                            /// @src 1:115:796  \"contract Attack {...\"\n                            let pos := mload(_2)\n                            returndatacopy(pos, _3, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 1:569:599  \"crossFunction.withdraw(AMOUNT)\"\n                        if _4\n                        {\n                            finalize_allocation(_1)\n                            /// @src 1:115:796  \"contract Attack {...\"\n                            _3 := _3\n                        }\n                        return(_3, _3)\n                    }\n                    case 0xd0e30db0 {\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 1:204:211  \"1 ether\"\n                        let _5 := 0x0de0b6b3a7640000\n                        /// @src 1:115:796  \"contract Attack {...\"\n                        if /** @src 1:426:445  \"msg.value >= AMOUNT\" */ lt(/** @src 1:426:435  \"msg.value\" */ callvalue(), /** @src 1:204:211  \"1 ether\" */ _5)\n                        /// @src 1:115:796  \"contract Attack {...\"\n                        {\n                            let memPtr := mload(_2)\n                            mstore(memPtr, shl(229, 4594637))\n                            mstore(add(memPtr, 4), 32)\n                            mstore(add(memPtr, 36), 19)\n                            mstore(add(memPtr, 68), \"MAKE ENOUGH DePOSIT\")\n                            revert(memPtr, 100)\n                        }\n                        let value_1 := and(sload(_3), sub(shl(160, 1), 1))\n                        /// @src 1:479:517  \"crossFunction.deposit{value: AMOUNT}()\"\n                        if iszero(extcodesize(value_1))\n                        {\n                            /// @src 1:115:796  \"contract Attack {...\"\n                            revert(_3, _3)\n                        }\n                        /// @src 1:479:517  \"crossFunction.deposit{value: AMOUNT}()\"\n                        let _6 := /** @src 1:115:796  \"contract Attack {...\" */ mload(_2)\n                        /// @src 1:479:517  \"crossFunction.deposit{value: AMOUNT}()\"\n                        mstore(_6, /** @src 1:115:796  \"contract Attack {...\" */ shl(228, 0x0d0e30db))\n                        /// @src 1:479:517  \"crossFunction.deposit{value: AMOUNT}()\"\n                        let _7 := call(gas(), value_1, /** @src 1:204:211  \"1 ether\" */ _5, /** @src 1:479:517  \"crossFunction.deposit{value: AMOUNT}()\" */ _6, /** @src 1:115:796  \"contract Attack {...\" */ 4, /** @src 1:479:517  \"crossFunction.deposit{value: AMOUNT}()\" */ _6, /** @src 1:115:796  \"contract Attack {...\" */ _3)\n                        /// @src 1:479:517  \"crossFunction.deposit{value: AMOUNT}()\"\n                        if iszero(_7)\n                        {\n                            /// @src 1:115:796  \"contract Attack {...\"\n                            let pos_1 := mload(_2)\n                            returndatacopy(pos_1, _3, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        /// @src 1:479:517  \"crossFunction.deposit{value: AMOUNT}()\"\n                        if _7\n                        {\n                            finalize_allocation(_6)\n                            /// @src 1:115:796  \"contract Attack {...\"\n                            if _3 { revert(_3, _3) }\n                        }\n                        return(_3, _3)\n                    }\n                    case 0xd1789176 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let memPos := mload(_2)\n                        mstore(memPos, /** @src 1:204:211  \"1 ether\" */ 0x0de0b6b3a7640000)\n                        /// @src 1:115:796  \"contract Attack {...\"\n                        return(memPos, 32)\n                    }\n                }\n                if iszero(calldatasize()) { stop() }\n                revert(0, 0)\n            }\n            function finalize_allocation(memPtr)\n            {\n                if gt(memPtr, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, memPtr)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212205be7f7f97996dc1970186d929a430b1ee9e76606ce9b3500f446d9854d7978f464736f6c63430008120033\"\n    }\n}\n",
        "hash": "0100005dd45f9a5eb2f818a2d1e9c40406b8e0bcbc40b353e604c5011500ccc0",
        "factoryDependencies": {}
      }
    },
    "src/Cross-Function/CrossFunction.sol": {
      "CrossFunction": {
        "abi": [
          {
            "inputs": [],
            "name": "deposit",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "user",
                "type": "address"
              }
            ],
            "name": "getBalance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "jump_table_density_threshold": null,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Cross-Function/CrossFunction.sol\":\"CrossFunction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"src/Cross-Function/CrossFunction.sol\":{\"keccak256\":\"0x69a1c8e19456b3794a9e30e463ad03e69902626899fe1eef54a7aa557b72e459\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://0e31f48aa606aeab2c638cff419ca94885df799c0584431f71be5ae898feafb4\",\"dweb:/ipfs/QmQ7F2WJGxDeQVBScebHrFxD1AWVrvK5ezEHEBPtLJtq85\"]}},\"version\":1}",
          "solc_version": "0.8.18",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.1"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"CrossFunction.sol:CrossFunction\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[4]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.gt\t@.BB0_8\n\tsub.s!\t@CPI0_5[0], r2, r4\n\tjump.eq\t@.BB0_10\n\tsub.s!\t@CPI0_6[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_7[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[3]\n\tcontext.caller\tr1\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[2]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[4]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r4\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub.s!\tstack-[3], r2, r3\n\tjump.lt\t@.BB0_42\n\tsub.s\tstack-[3], r2, r2\n\tsstore\tr1, r2\n\tst.1\t0, r4\n\tadd\tstack-[2], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r3\n\tadd\tstack-[3], r0, r2\n\tjump\t@.BB0_45\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t1, r0, r1\n\tsstore\tr0, r1\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_8:\n\tsub.s!\t@CPI0_3[0], r2, r4\n\tjump.eq\t@.BB0_47\n\tsub.s!\t@CPI0_4[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_7[0], r1, r2\n\tjump.gt\t@.BB0_2\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_8[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_10:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r2\n\tsload\tr0, r1\n\tsub.s!\t2, r1, r1\n\tjump.ne\t@.BB0_14\n\tadd\t@CPI0_10[0], r0, r1\n\tst.1\t128, r1\n\tadd\t32, r0, r1\n\tst.1\t132, r1\n\tadd\t31, r0, r1\n\tst.1\t164, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tst.1\t196, r1\n\tadd\t@CPI0_23[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_47:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_49\n\tadd\t@CPI0_10[0], r0, r1\n\tst.1\t128, r1\n\tadd\t32, r0, r1\n\tst.1\t132, r1\n\tadd\t35, r0, r1\n\tst.1\t164, r1\n\tadd\t@CPI0_11[0], r0, r1\n\tst.1\t196, r1\n\tadd\t@CPI0_12[0], r0, r1\n\tst.1\t228, r1\n\tadd\t@CPI0_13[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_49:\n\tadd\tr2, r0, stack-[4]\n\tcontext.caller\tr1\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r3\n\tadd\tstack-[4], r0, r2\n.BB0_45:\n\tadd\tr3, r2, r2\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tand!\t1, r3, r3\n\tjump.eq\t@.BB0_46\n.BB0_42:\n\tadd\t@CPI0_14[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_15[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_14:\n\tadd\tr2, r0, stack-[4]\n\tadd\t2, r0, r1\n\tsstore\tr0, r1\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[3]\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[2]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r10\n\tadd\tstack-[4], r0, r9\n\tsub!\tr10, r9, r1\n\tjump.ge\t@.BB0_18\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_21[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t18, r0, r3\n\tjump\t@.BB0_17\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_46:\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_18:\n\tcontext.gas_left\tr1\n\tadd\tstack-[3], r0, r2\n\tsub.s!\t4, r2, r2\n\tjump.ne\t@.BB0_19\n\tadd\tstack[@returndatasize], r0, r1\n\tadd\tstack-[2], r0, r2\n\tjump\t@.BB0_21\n.BB0_19:\n\tadd\tr10, r0, stack-[1]\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tsub!\tr9, r0, r2\n\tjump.ne\t@.BB0_24\n\tadd\tstack-[3], r0, r2\n\tjump\t@.BB0_23\n.BB0_24:\n\tor\t@CPI0_16[0], r1, r1\n\tadd\t32777, r0, r2\n\tadd\tr9, r0, r3\n\tadd\tstack-[3], r0, r4\n\tadd\tr0, r0, r5\n.BB0_23:\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r9\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, stack[@returndatasize]\n\tand\t@CPI0_0[0], r1, r1\n\tadd\tstack-[1], r0, r10\n.BB0_21:\n\tsub!\tr1, r0, r3\n\tjump.ne\t@.BB0_26\n.BB0_25:\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_35\n\tadd\tstack-[3], r0, r1\n\tst.1\t0, r1\n\tsub\tr10, r9, stack-[4]\n\tadd\tstack-[2], r0, r1\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[2], r0, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_26:\n\tsub.s!\t@CPI0_17[0], r1, r3\n\tjump.ge\t@.BB0_27\n\tadd\t31, r1, r3\n\tsub.s\t32, r0, r4\n\tand\tr3, r4, r3\n\tadd\t63, r3, r3\n\tand\tr3, r4, r3\n\tld.1\t64, r4\n\tadd\tr4, r3, r3\n\tsub!\tr3, r4, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_18[0], r3, r6\n\tjump.gt\t@.BB0_27\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_27\n\tst.1\t64, r3\n\tand\t31, r1, r3\n\tst.1.inc\tr4, r1, r4\n\tptr.add\tstack[@ptr_return_data], r0, r5\n\tshr.s!\t5, r1, r1\n\tjump.eq\t@.BB0_55\n\tadd\tr0, r0, r6\n.BB0_33:\n\tshl.s\t5, r6, r7\n\tadd\tr4, r7, r8\n\tptr.add\tr5, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r1, r7\n\tjump.lt\t@.BB0_33\n.BB0_55:\n\tsub!\tr3, r0, r6\n\tjump.eq\t@.BB0_25\n\tshl.s\t5, r1, r1\n\tptr.add\tr5, r1, r5\n\tadd\tr4, r1, r1\n\tshl.s\t3, r3, r3\n\tld.1\tr1, r4\n\tshl\tr4, r3, r4\n\tshr\tr4, r3, r4\n\tld\tr5, r5\n\tsub\t256, r3, r3\n\tshr\tr5, r3, r5\n\tshl\tr5, r3, r3\n\tor\tr3, r4, r3\n\tst.1\tr1, r3\n\tjump\t@.BB0_25\n.BB0_27:\n\tadd\t@CPI0_14[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_15[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_35:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_19[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t17, r0, r3\n.BB0_17:\n\tst.1\tr2, r3\n\tadd\t@CPI0_10[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_20[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n__sha3:\n.func_begin1:\n\tadd\t@CPI1_0[0], r0, r2\n\tsub.s!\t@CPI1_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI1_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tshl.s\t192, r3, r2\n\tshl.s\t64, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI1_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_2\n\tld\tr1, r1\n\tret\n.BB1_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\n__farcall:\n.func_begin2:\n.tmp0:\n\tfar_call\tr1, r2, @.BB2_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB2_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB3_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 3504541103\nCPI0_3:\n\t.cell 3504541104\nCPI0_4:\n\t.cell 4172467023\nCPI0_5:\n\t.cell 773487949\nCPI0_6:\n\t.cell 2835717307\nCPI0_7:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_8:\n\t.cell 2535301202817642044428229017600\nCPI0_9:\nCPI1_1:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_10:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_11:\n\t.cell 34978846454404227153176319195363144472292115716464029187408077465211770904666\nCPI0_12:\n\t.cell 31355013249518604767324404793896951866885272871563535491363881487552510689280\nCPI0_13:\n\t.cell 10458117454244075803782624051200\nCPI0_14:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_15:\n\t.cell 2852213850513516153367582212096\nCPI0_16:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_17:\n\t.cell 18446744073709551616\nCPI0_18:\n\t.cell 18446744073709551615\nCPI0_19:\n\t.cell 39480779357477361962311780413568655214994676343447654353954917508214247391232\nCPI0_20:\n\t.cell 7922816251426433759354395033600\nCPI0_21:\n\t.cell 35420563724322457358740159548119052359062939154934234350902806688684918702080\nCPI0_22:\n\t.cell 37268805191608899176760263720700790282416321829889089033725955971341467020288\nCPI0_23:\n\t.cell 7922816253787617000789217640448\n",
          "bytecode": {
            "object": "0002000000000002000400000000000200000000030100190000006003300270000000590330019700010000003103550000008004000039000000400040043f0000000102200190000000480000c13d000000040230008c000000c80000413d000000000201043b000000e0022002700000005b0420009c000000520000213d0000005e0420009c000000680000613d0000005f0220009c000000c80000c13d0000000002000416000000440330008c000000c80000413d000000000202004b000000c80000c13d0000000402100370000000000402043b000000600240009c000000c80000213d0000002401100370000000000101043b000300000001001d000000000100041100000000001004350000000101000039000200000001001d000000200010043f00000059010000410000000002000414000000590320009c0000000002018019000000c00120021000000062011001c70000801002000039000400000004001d015d01580000040f00000004040000290000000102200190000000c80000613d000000000101043b000000000201041a000000030320006c000000a30000413d000000030220006a000000000021041b00000000004004350000000201000029000000200010043f00000059010000410000000002000414000000590320009c0000000002018019000000c00120021000000062011001c70000801002000039015d01580000040f0000000102200190000000c80000613d000000000101043b000000000301041a00000003020000290000009d0000013d0000000001000416000000000101004b000000c80000c13d0000000101000039000000000010041b0000002001000039000001000010044300000120000004430000005a010000410000015e0001042e0000005c0420009c0000007c0000613d0000005d0220009c000000c80000c13d0000000002000416000000240330008c000000c80000413d000000000202004b000000c80000c13d0000000401100370000000000101043b000000600210009c000000c80000213d00000000001004350000000101000039000000200010043f0000000001000019015d01410000040f000000000101041a000000800010043f00000061010000410000015e0001042e0000000002000416000000240330008c000000c80000413d000000000202004b000000c80000c13d0000000401100370000000000201043b000000000100041a000000020110008c000000a90000c13d0000006301000041000000800010043f0000002001000039000000840010043f0000001f01000039000000a40010043f0000006f01000041000000c40010043f00000070010000410000015f000104300000000002000416000000000102004b0000008b0000c13d0000006301000041000000800010043f0000002001000039000000840010043f0000002301000039000000a40010043f0000006401000041000000c40010043f0000006501000041000000e40010043f00000066010000410000015f00010430000400000002001d000000000100041100000000001004350000000101000039000000200010043f00000059010000410000000002000414000000590320009c0000000002018019000000c00120021000000062011001c70000801002000039015d01580000040f0000000102200190000000c80000613d000000000101043b000000000301041a00000004020000290000000002230019000000000332004b000000000300001900000001030040390000000103300190000000ca0000613d000000670100004100000000001004350000001101000039000000040010043f00000068010000410000015f00010430000400000002001d0000000201000039000000000010041b0000000001000411000300000001001d00000000001004350000000101000039000200000001001d000000200010043f00000059010000410000000002000414000000590320009c0000000002018019000000c00120021000000062011001c70000801002000039015d01580000040f0000000102200190000000c80000613d000000000101043b000000000a01041a000000040900002900000000019a004b000000cd0000813d000000400100043d00000044021000390000006e03000041000000000032043500000024021000390000001203000039000001350000013d00000000010000190000015f00010430000000000021041b00000000010000190000015e0001042e00000000010004140000000302000029000000040220008c000000d40000c13d00000000010000310000000202000029000000e90000013d00010000000a001d0000005902000041000000590310009c0000000001028019000000c001100210000000000209004b000000dd0000c13d0000000302000029000000e20000013d00000069011001c70000800902000039000000000309001900000003040000290000000005000019015d01530000040f000000040900002900010000000103550000006001100270000000590010019d0000005901100197000000010a000029000000000301004b000000fa0000c13d00000001012001900000012f0000613d0000000301000029000000000010043500040000009a00510000000201000029000000200010043f0000000001000019015d01410000040f0000000402000029000000000021041b0000000201000029000000000010041b00000000010000190000015e0001042e0000006a0310009c000001290000813d0000001f03100039000000200400008a000000000343016f0000003f03300039000000000343016f000000400400043d0000000003340019000000000543004b000000000500001900000001050040390000006b0630009c000001290000213d0000000105500190000001290000c13d000000400030043f0000001f0310018f000000000414043600000001050003670000000501100272000001190000613d000000000600001900000005076002100000000008740019000000000775034f000000000707043b00000000007804350000000106600039000000000716004b000001110000413d000000000603004b000000eb0000613d0000000501100210000000000515034f00000000011400190000000303300210000000000401043300000000043401cf000000000434022f000000000505043b0000010003300089000000000535022f00000000033501cf000000000343019f0000000000310435000000eb0000013d000000670100004100000000001004350000004101000039000000040010043f00000068010000410000015f00010430000000400100043d00000044021000390000006c030000410000000000320435000000240210003900000011030000390000000000320435000000630200004100000000002104350000000402100039000000200300003900000000003204350000005902000041000000590310009c000000000102801900000040011002100000006d011001c70000015f000104300000005902000041000000590310009c00000000010280190000000003000414000000590430009c0000000003028019000000c0023002100000004001100210000000000121019f00000062011001c70000801002000039015d01580000040f0000000102200190000001510000613d000000000101043b000000000001042d00000000010000190000015f0001043000000156002104210000000102000039000000000001042d0000000002000019000000000001042d0000015b002104230000000102000039000000000001042d0000000002000019000000000001042d0000015d000004320000015e0001042e0000015f00010430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000d0e30daf00000000000000000000000000000000000000000000000000000000d0e30db000000000000000000000000000000000000000000000000000000000f8b2cb4f000000000000000000000000000000000000000000000000000000002e1a7d4d00000000000000000000000000000000000000000000000000000000a9059cbb000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000020000000800000000000000000020000000000000000000000000000000000004000000000000000000000000008c379a0000000000000000000000000000000000000000000000000000000004d5553542053454e4420412056414c55452047524541544552205448414e205a45524f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000840000008000000000000000004e487b7100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff5749544844524157414c204641494c454400000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000004e4f5420454e4f5547482042414c414e434500000000000000000000000000005265656e7472616e637947756172643a207265656e7472616e742063616c6c00000000000000000000000000000000000000006400000080000000000000000000000000000000000000000000000000000000000000000000000000000000001d478b091b9dd9e81811459269cbc45b9851165f1b16b903113279f8bb384ba0"
          },
          "methodIdentifiers": {
            "deposit()": "d0e30db0",
            "getBalance(address)": "f8b2cb4f",
            "transfer(address,uint256)": "a9059cbb",
            "withdraw(uint256)": "2e1a7d4d"
          }
        },
        "irOptimized": "/// @use-src 0:\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\", 2:\"src/Cross-Function/CrossFunction.sol\"\nobject \"CrossFunction_215\" {\n    code {\n        {\n            /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            /// @src 0:1701:1702  \"1\"\n            sstore(/** @src 0:1806:1828  \"_status = _NOT_ENTERED\" */ 0x00, /** @src 0:1701:1702  \"1\" */ 0x01)\n            /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n            let _2 := datasize(\"CrossFunction_215_deployed\")\n            codecopy(_1, dataoffset(\"CrossFunction_215_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\", 2:\"src/Cross-Function/CrossFunction.sol\"\n    object \"CrossFunction_215_deployed\" {\n        code {\n            {\n                /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x2e1a7d4d {\n                        if callvalue() { revert(_4, _4) }\n                        let _5 := 32\n                        if slt(add(calldatasize(), not(3)), _5) { revert(_4, _4) }\n                        let value := calldataload(_3)\n                        /// @src 0:1744:1745  \"2\"\n                        if /** @src 0:2325:2344  \"_status != _ENTERED\" */ eq(/** @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\" */ sload(_4), /** @src 0:1744:1745  \"2\" */ 0x02)\n                        {\n                            mstore(_1, shl(229, 4594637))\n                            mstore(add(_1, /** @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\" */ _3), _5)\n                            mstore(/** @src 0:1744:1745  \"2\" */ add(_1, 36), 31)\n                            mstore(/** @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\" */ add(/** @src 0:1744:1745  \"2\" */ _1, /** @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\" */ 68), /** @src 0:1744:1745  \"2\" */ \"ReentrancyGuard: reentrant call\")\n                            revert(_1, 100)\n                        }\n                        /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                        sstore(_4, /** @src 0:1744:1745  \"2\" */ 0x02)\n                        /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                        mstore(_4, /** @src 2:499:509  \"msg.sender\" */ caller())\n                        /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                        mstore(_5, 1)\n                        let _6 := sload(keccak256(_4, _2))\n                        if /** @src 2:528:550  \"usersBalance >= amount\" */ lt(_6, value)\n                        /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                        {\n                            let memPtr := mload(_2)\n                            mstore(memPtr, /** @src 0:1744:1745  \"2\" */ shl(229, 4594637))\n                            /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                            mstore(add(memPtr, _3), _5)\n                            mstore(add(memPtr, 36), 18)\n                            mstore(add(memPtr, 68), \"NOT ENOUGH BALANCE\")\n                            revert(memPtr, 100)\n                        }\n                        /// @src 2:603:645  \"payable(msg.sender).call{value:amount}(\\\"\\\")\"\n                        let expr_component := call(gas(), /** @src 2:499:509  \"msg.sender\" */ caller(), /** @src 2:603:645  \"payable(msg.sender).call{value:amount}(\\\"\\\")\" */ value, /** @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\" */ _4, _4, _4, _4)\n                        switch returndatasize()\n                        case 0 { }\n                        default {\n                            let _7 := returndatasize()\n                            let _8 := 0xffffffffffffffff\n                            if gt(_7, _8)\n                            {\n                                mstore(_4, shl(224, 0x4e487b71))\n                                mstore(_3, 0x41)\n                                revert(_4, 0x24)\n                            }\n                            let _9 := not(31)\n                            let memPtr_1 := mload(_2)\n                            let newFreePtr := add(memPtr_1, and(add(and(add(_7, 31), _9), 63), _9))\n                            if or(gt(newFreePtr, _8), lt(newFreePtr, memPtr_1))\n                            {\n                                mstore(_4, shl(224, 0x4e487b71))\n                                mstore(_3, 0x41)\n                                revert(_4, 0x24)\n                            }\n                            mstore(_2, newFreePtr)\n                            mstore(memPtr_1, _7)\n                            returndatacopy(add(memPtr_1, _5), _4, returndatasize())\n                        }\n                        if iszero(expr_component)\n                        {\n                            let memPtr_2 := mload(_2)\n                            mstore(memPtr_2, /** @src 0:1744:1745  \"2\" */ shl(229, 4594637))\n                            /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                            mstore(add(memPtr_2, _3), _5)\n                            mstore(add(memPtr_2, 36), 17)\n                            mstore(add(memPtr_2, 68), \"WITHDRAWAL FAILED\")\n                            revert(memPtr_2, 100)\n                        }\n                        /// @src 2:726:747  \"usersBalance - amount\"\n                        let _10 := checked_sub_uint256(_6, value)\n                        /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                        mstore(_4, /** @src 2:499:509  \"msg.sender\" */ caller())\n                        /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                        mstore(_5, 1)\n                        sstore(keccak256(_4, _2), _10)\n                        sstore(_4, 1)\n                        return(_4, _4)\n                    }\n                    case 0xa9059cbb {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let value0 := abi_decode_address()\n                        let value_1 := calldataload(36)\n                        mstore(_4, /** @src 2:832:842  \"msg.sender\" */ caller())\n                        /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                        mstore(32, 1)\n                        let dataSlot := keccak256(_4, _2)\n                        sstore(dataSlot, /** @src 2:823:853  \"balances[msg.sender] -= amount\" */ checked_sub_uint256(/** @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\" */ sload(/** @src 2:823:853  \"balances[msg.sender] -= amount\" */ dataSlot), value_1))\n                        /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                        mstore(_4, and(value0, sub(shl(160, 1), 1)))\n                        mstore(32, 1)\n                        let dataSlot_1 := keccak256(_4, _2)\n                        sstore(dataSlot_1, /** @src 2:863:885  \"balances[to] += amount\" */ checked_add_uint256(/** @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\" */ sload(/** @src 2:863:885  \"balances[to] += amount\" */ dataSlot_1), value_1))\n                        /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                        return(_4, _4)\n                    }\n                    case 0xd0e30db0 {\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        if /** @src 2:295:308  \"msg.value > 0\" */ iszero(/** @src 2:295:304  \"msg.value\" */ callvalue())\n                        /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                        {\n                            let memPtr_3 := mload(_2)\n                            mstore(memPtr_3, /** @src 0:1744:1745  \"2\" */ shl(229, 4594637))\n                            /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                            mstore(add(memPtr_3, _3), 32)\n                            mstore(add(memPtr_3, 36), 35)\n                            mstore(add(memPtr_3, 68), \"MUST SEND A VALUE GREATER THAN Z\")\n                            mstore(add(memPtr_3, 100), \"ERO\")\n                            revert(memPtr_3, 132)\n                        }\n                        mstore(_4, /** @src 2:367:377  \"msg.sender\" */ caller())\n                        /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                        mstore(0x20, /** @src 2:358:366  \"balances\" */ 0x01)\n                        /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                        let dataSlot_2 := keccak256(_4, _2)\n                        sstore(dataSlot_2, /** @src 2:358:391  \"balances[msg.sender] += msg.value\" */ checked_add_uint256(/** @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\" */ sload(/** @src 2:358:391  \"balances[msg.sender] += msg.value\" */ dataSlot_2), /** @src 2:295:304  \"msg.value\" */ callvalue()))\n                        /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                        return(_4, _4)\n                    }\n                    case 0xf8b2cb4f {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        mstore(_4, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 2:980:988  \"balances\" */ 0x01)\n                        /// @src 2:150:1003  \"contract CrossFunction is ReentrancyGuard {...\"\n                        let _11 := sload(keccak256(_4, _2))\n                        let memPos := mload(_2)\n                        mstore(memPos, _11)\n                        return(memPos, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                sum := add(x, y)\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                diff := sub(x, y)\n                if gt(diff, x)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220624c56e6eef11afd6fcf5dea8dadd0eb1982b1d0f5c68285f3571d96e65c14a464736f6c63430008120033\"\n    }\n}\n",
        "hash": "01000073e42ee305859ad12f4f1166030c377ba90a127feb5bec71e535c60989",
        "factoryDependencies": {}
      }
    }
  },
  "sources": {
    "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
      "id": 0,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "exportedSymbols": {
          "ReentrancyGuard": [
            39
          ]
        },
        "id": 40,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".0"
            ],
            "nodeType": "PragmaDirective",
            "src": "97:23:0"
          },
          {
            "abstract": true,
            "baseContracts": [],
            "canonicalName": "ReentrancyGuard",
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": {
              "id": 2,
              "nodeType": "StructuredDocumentation",
              "src": "122:750:0",
              "text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
            },
            "fullyImplemented": true,
            "id": 39,
            "linearizedBaseContracts": [
              39
            ],
            "name": "ReentrancyGuard",
            "nameLocation": "891:15:0",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": true,
                "id": 5,
                "mutability": "constant",
                "name": "_NOT_ENTERED",
                "nameLocation": "1686:12:0",
                "nodeType": "VariableDeclaration",
                "scope": 39,
                "src": "1661:41:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 3,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1661:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "hexValue": "31",
                  "id": 4,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1701:1:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_1_by_1",
                    "typeString": "int_const 1"
                  },
                  "value": "1"
                },
                "visibility": "private"
              },
              {
                "constant": true,
                "id": 8,
                "mutability": "constant",
                "name": "_ENTERED",
                "nameLocation": "1733:8:0",
                "nodeType": "VariableDeclaration",
                "scope": 39,
                "src": "1708:37:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 6,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1708:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "hexValue": "32",
                  "id": 7,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1744:1:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_2_by_1",
                    "typeString": "int_const 2"
                  },
                  "value": "2"
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 10,
                "mutability": "mutable",
                "name": "_status",
                "nameLocation": "1768:7:0",
                "nodeType": "VariableDeclaration",
                "scope": 39,
                "src": "1752:23:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 9,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1752:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "private"
              },
              {
                "body": {
                  "id": 17,
                  "nodeType": "Block",
                  "src": "1796:39:0",
                  "statements": [
                    {
                      "expression": {
                        "id": 15,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 13,
                          "name": "_status",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10,
                          "src": "1806:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 14,
                          "name": "_NOT_ENTERED",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5,
                          "src": "1816:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1806:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 16,
                      "nodeType": "ExpressionStatement",
                      "src": "1806:22:0"
                    }
                  ]
                },
                "id": 18,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nameLocation": "-1:-1:-1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 11,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1793:2:0"
                },
                "returnParameters": {
                  "id": 12,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1796:0:0"
                },
                "scope": 39,
                "src": "1782:53:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 37,
                  "nodeType": "Block",
                  "src": "2236:421:0",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 24,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 22,
                              "name": "_status",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "2325:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "id": 23,
                              "name": "_ENTERED",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 8,
                              "src": "2336:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "2325:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
                            "id": 25,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2346:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                              "typeString": "literal_string \"ReentrancyGuard: reentrant call\""
                            },
                            "value": "ReentrancyGuard: reentrant call"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                              "typeString": "literal_string \"ReentrancyGuard: reentrant call\""
                            }
                          ],
                          "id": 21,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "2317:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 26,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2317:63:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 27,
                      "nodeType": "ExpressionStatement",
                      "src": "2317:63:0"
                    },
                    {
                      "expression": {
                        "id": 30,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 28,
                          "name": "_status",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10,
                          "src": "2455:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 29,
                          "name": "_ENTERED",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8,
                          "src": "2465:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2455:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 31,
                      "nodeType": "ExpressionStatement",
                      "src": "2455:18:0"
                    },
                    {
                      "id": 32,
                      "nodeType": "PlaceholderStatement",
                      "src": "2484:1:0"
                    },
                    {
                      "expression": {
                        "id": 35,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 33,
                          "name": "_status",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10,
                          "src": "2628:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 34,
                          "name": "_NOT_ENTERED",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5,
                          "src": "2638:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2628:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 36,
                      "nodeType": "ExpressionStatement",
                      "src": "2628:22:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 19,
                  "nodeType": "StructuredDocumentation",
                  "src": "1841:366:0",
                  "text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
                },
                "id": 38,
                "name": "nonReentrant",
                "nameLocation": "2221:12:0",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 20,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2233:2:0"
                },
                "src": "2212:445:0",
                "virtual": false,
                "visibility": "internal"
              }
            ],
            "scope": 40,
            "src": "873:1786:0",
            "usedErrors": []
          }
        ],
        "src": "97:2563:0"
      }
    },
    "src/Cross-Function/Attack.sol": {
      "id": 1,
      "ast": {
        "absolutePath": "src/Cross-Function/Attack.sol",
        "exportedSymbols": {
          "Attack": [
            102
          ],
          "CrossFunction": [
            215
          ]
        },
        "id": 103,
        "license": "UNLICENSED",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 41,
            "literals": [
              "solidity",
              "0.8",
              ".18"
            ],
            "nodeType": "PragmaDirective",
            "src": "39:23:1"
          },
          {
            "absolutePath": "src/Cross-Function/CrossFunction.sol",
            "file": "./CrossFunction.sol",
            "id": 43,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 103,
            "sourceUnit": 216,
            "src": "63:50:1",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 42,
                  "name": "CrossFunction",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 215,
                  "src": "71:13:1",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "Attack",
            "contractDependencies": [],
            "contractKind": "contract",
            "fullyImplemented": true,
            "id": 102,
            "linearizedBaseContracts": [
              102
            ],
            "name": "Attack",
            "nameLocation": "124:6:1",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 46,
                "mutability": "mutable",
                "name": "crossFunction",
                "nameLocation": "151:13:1",
                "nodeType": "VariableDeclaration",
                "scope": 102,
                "src": "137:27:1",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_CrossFunction_$215",
                  "typeString": "contract CrossFunction"
                },
                "typeName": {
                  "id": 45,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 44,
                    "name": "CrossFunction",
                    "nameLocations": [
                      "137:13:1"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 215,
                    "src": "137:13:1"
                  },
                  "referencedDeclaration": 215,
                  "src": "137:13:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_CrossFunction_$215",
                    "typeString": "contract CrossFunction"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": true,
                "functionSelector": "d1789176",
                "id": 49,
                "mutability": "constant",
                "name": "AMOUNT",
                "nameLocation": "195:6:1",
                "nodeType": "VariableDeclaration",
                "scope": 102,
                "src": "171:40:1",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 47,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "171:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "hexValue": "31",
                  "id": 48,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "204:7:1",
                  "subdenomination": "ether",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_1000000000000000000_by_1",
                    "typeString": "int_const 1000000000000000000"
                  },
                  "value": "1"
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 51,
                "mutability": "mutable",
                "name": "owner",
                "nameLocation": "225:5:1",
                "nodeType": "VariableDeclaration",
                "scope": 102,
                "src": "217:13:1",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 50,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "217:7:1",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 67,
                  "nodeType": "Block",
                  "src": "295:71:1",
                  "statements": [
                    {
                      "expression": {
                        "id": 61,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 59,
                          "name": "crossFunction",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 46,
                          "src": "305:13:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_CrossFunction_$215",
                            "typeString": "contract CrossFunction"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 60,
                          "name": "_crossFunction",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 54,
                          "src": "321:14:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_CrossFunction_$215",
                            "typeString": "contract CrossFunction"
                          }
                        },
                        "src": "305:30:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CrossFunction_$215",
                          "typeString": "contract CrossFunction"
                        }
                      },
                      "id": 62,
                      "nodeType": "ExpressionStatement",
                      "src": "305:30:1"
                    },
                    {
                      "expression": {
                        "id": 65,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 63,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 51,
                          "src": "345:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 64,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 56,
                          "src": "353:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "345:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 66,
                      "nodeType": "ExpressionStatement",
                      "src": "345:14:1"
                    }
                  ]
                },
                "id": 68,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nameLocation": "-1:-1:-1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 57,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 54,
                      "mutability": "mutable",
                      "name": "_crossFunction",
                      "nameLocation": "263:14:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 68,
                      "src": "249:28:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CrossFunction_$215",
                        "typeString": "contract CrossFunction"
                      },
                      "typeName": {
                        "id": 53,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 52,
                          "name": "CrossFunction",
                          "nameLocations": [
                            "249:13:1"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 215,
                          "src": "249:13:1"
                        },
                        "referencedDeclaration": 215,
                        "src": "249:13:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CrossFunction_$215",
                          "typeString": "contract CrossFunction"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 56,
                      "mutability": "mutable",
                      "name": "_owner",
                      "nameLocation": "287:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 68,
                      "src": "279:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 55,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "279:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "248:46:1"
                },
                "returnParameters": {
                  "id": 58,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "295:0:1"
                },
                "scope": 102,
                "src": "237:129:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 86,
                  "nodeType": "Block",
                  "src": "408:116:1",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 75,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 72,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "426:3:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 73,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "430:5:1",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "426:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "id": 74,
                              "name": "AMOUNT",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 49,
                              "src": "439:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "426:19:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "4d414b4520454e4f554748204465504f534954",
                            "id": 76,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "447:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_a3b35ccf5df7ba8a5927125fc44f95df8ecd6c893cc22db9fb09df14f8fe4f35",
                              "typeString": "literal_string \"MAKE ENOUGH DePOSIT\""
                            },
                            "value": "MAKE ENOUGH DePOSIT"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_a3b35ccf5df7ba8a5927125fc44f95df8ecd6c893cc22db9fb09df14f8fe4f35",
                              "typeString": "literal_string \"MAKE ENOUGH DePOSIT\""
                            }
                          ],
                          "id": 71,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "418:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 77,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "418:51:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 78,
                      "nodeType": "ExpressionStatement",
                      "src": "418:51:1"
                    },
                    {
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 79,
                              "name": "crossFunction",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 46,
                              "src": "479:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_CrossFunction_$215",
                                "typeString": "contract CrossFunction"
                              }
                            },
                            "id": 81,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "493:7:1",
                            "memberName": "deposit",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 132,
                            "src": "479:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_payable$__$returns$__$",
                              "typeString": "function () payable external"
                            }
                          },
                          "id": 83,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "names": [
                            "value"
                          ],
                          "nodeType": "FunctionCallOptions",
                          "options": [
                            {
                              "id": 82,
                              "name": "AMOUNT",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 49,
                              "src": "508:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "src": "479:36:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_payable$__$returns$__$value",
                            "typeString": "function () payable external"
                          }
                        },
                        "id": 84,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "479:38:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 85,
                      "nodeType": "ExpressionStatement",
                      "src": "479:38:1"
                    }
                  ]
                },
                "functionSelector": "d0e30db0",
                "id": 87,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "deposit",
                "nameLocation": "381:7:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 69,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "388:2:1"
                },
                "returnParameters": {
                  "id": 70,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "408:0:1"
                },
                "scope": 102,
                "src": "372:152:1",
                "stateMutability": "payable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 96,
                  "nodeType": "Block",
                  "src": "559:47:1",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 93,
                            "name": "AMOUNT",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 49,
                            "src": "592:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 90,
                            "name": "crossFunction",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46,
                            "src": "569:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CrossFunction_$215",
                              "typeString": "contract CrossFunction"
                            }
                          },
                          "id": 92,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "583:8:1",
                          "memberName": "withdraw",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 181,
                          "src": "569:22:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                            "typeString": "function (uint256) external"
                          }
                        },
                        "id": 94,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "569:30:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 95,
                      "nodeType": "ExpressionStatement",
                      "src": "569:30:1"
                    }
                  ]
                },
                "functionSelector": "3ccfd60b",
                "id": 97,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "withdraw",
                "nameLocation": "539:8:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 88,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "547:2:1"
                },
                "returnParameters": {
                  "id": 89,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "559:0:1"
                },
                "scope": 102,
                "src": "530:76:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 100,
                  "nodeType": "Block",
                  "src": "639:155:1",
                  "statements": []
                },
                "id": 101,
                "implemented": true,
                "kind": "receive",
                "modifiers": [],
                "name": "",
                "nameLocation": "-1:-1:-1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 98,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "619:2:1"
                },
                "returnParameters": {
                  "id": 99,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "639:0:1"
                },
                "scope": 102,
                "src": "612:182:1",
                "stateMutability": "payable",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 103,
            "src": "115:681:1",
            "usedErrors": []
          }
        ],
        "src": "39:757:1"
      }
    },
    "src/Cross-Function/CrossFunction.sol": {
      "id": 2,
      "ast": {
        "absolutePath": "src/Cross-Function/CrossFunction.sol",
        "exportedSymbols": {
          "CrossFunction": [
            215
          ],
          "ReentrancyGuard": [
            39
          ]
        },
        "id": 216,
        "license": "UNLICENSED",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 104,
            "literals": [
              "solidity",
              "0.8",
              ".18"
            ],
            "nodeType": "PragmaDirective",
            "src": "39:23:2"
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
            "file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
            "id": 106,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 216,
            "sourceUnit": 40,
            "src": "63:85:2",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 105,
                  "name": "ReentrancyGuard",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 39,
                  "src": "71:15:2",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "abstract": false,
            "baseContracts": [
              {
                "baseName": {
                  "id": 107,
                  "name": "ReentrancyGuard",
                  "nameLocations": [
                    "176:15:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 39,
                  "src": "176:15:2"
                },
                "id": 108,
                "nodeType": "InheritanceSpecifier",
                "src": "176:15:2"
              }
            ],
            "canonicalName": "CrossFunction",
            "contractDependencies": [],
            "contractKind": "contract",
            "fullyImplemented": true,
            "id": 215,
            "linearizedBaseContracts": [
              215,
              39
            ],
            "name": "CrossFunction",
            "nameLocation": "159:13:2",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 112,
                "mutability": "mutable",
                "name": "balances",
                "nameLocation": "226:8:2",
                "nodeType": "VariableDeclaration",
                "scope": 215,
                "src": "198:36:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 111,
                  "keyName": "",
                  "keyNameLocation": "-1:-1:-1",
                  "keyType": {
                    "id": 109,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "206:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "198:27:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueName": "",
                  "valueNameLocation": "-1:-1:-1",
                  "valueType": {
                    "id": 110,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "217:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 131,
                  "nodeType": "Block",
                  "src": "277:121:2",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 119,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 116,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "295:3:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 117,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "299:5:2",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "295:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 118,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "307:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "295:13:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "4d5553542053454e4420412056414c55452047524541544552205448414e205a45524f",
                            "id": 120,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "310:37:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_54f0568031df1e62f705b4900239893262050ae3734600c0c26605bb11af55e5",
                              "typeString": "literal_string \"MUST SEND A VALUE GREATER THAN ZERO\""
                            },
                            "value": "MUST SEND A VALUE GREATER THAN ZERO"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_54f0568031df1e62f705b4900239893262050ae3734600c0c26605bb11af55e5",
                              "typeString": "literal_string \"MUST SEND A VALUE GREATER THAN ZERO\""
                            }
                          ],
                          "id": 115,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "287:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 121,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "287:61:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 122,
                      "nodeType": "ExpressionStatement",
                      "src": "287:61:2"
                    },
                    {
                      "expression": {
                        "id": 129,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 123,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 112,
                            "src": "358:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 126,
                          "indexExpression": {
                            "expression": {
                              "id": 124,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "367:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 125,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "371:6:2",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "367:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "358:20:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "expression": {
                            "id": 127,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "382:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 128,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "386:5:2",
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "382:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "358:33:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 130,
                      "nodeType": "ExpressionStatement",
                      "src": "358:33:2"
                    }
                  ]
                },
                "functionSelector": "d0e30db0",
                "id": 132,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "deposit",
                "nameLocation": "250:7:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 113,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "257:2:2"
                },
                "returnParameters": {
                  "id": 114,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "277:0:2"
                },
                "scope": 215,
                "src": "241:157:2",
                "stateMutability": "payable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 180,
                  "nodeType": "Block",
                  "src": "457:297:2",
                  "statements": [
                    {
                      "assignments": [
                        140
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 140,
                          "mutability": "mutable",
                          "name": "usersBalance",
                          "nameLocation": "475:12:2",
                          "nodeType": "VariableDeclaration",
                          "scope": 180,
                          "src": "467:20:2",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 139,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "467:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 145,
                      "initialValue": {
                        "baseExpression": {
                          "id": 141,
                          "name": "balances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 112,
                          "src": "490:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 144,
                        "indexExpression": {
                          "expression": {
                            "id": 142,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "499:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 143,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "503:6:2",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "499:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "490:20:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "467:43:2"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 149,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 147,
                              "name": "usersBalance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 140,
                              "src": "528:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "id": 148,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 134,
                              "src": "544:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "528:22:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "4e4f5420454e4f5547482042414c414e4345",
                            "id": 150,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "552:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_5a038b79cc79417f4fb6588d33881177c88f17afe00a4079242fe5c067cd6d47",
                              "typeString": "literal_string \"NOT ENOUGH BALANCE\""
                            },
                            "value": "NOT ENOUGH BALANCE"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_5a038b79cc79417f4fb6588d33881177c88f17afe00a4079242fe5c067cd6d47",
                              "typeString": "literal_string \"NOT ENOUGH BALANCE\""
                            }
                          ],
                          "id": 146,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "520:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 151,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "520:53:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 152,
                      "nodeType": "ExpressionStatement",
                      "src": "520:53:2"
                    },
                    {
                      "assignments": [
                        154,
                        null
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 154,
                          "mutability": "mutable",
                          "name": "success",
                          "nameLocation": "590:7:2",
                          "nodeType": "VariableDeclaration",
                          "scope": 180,
                          "src": "585:12:2",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 153,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "585:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        },
                        null
                      ],
                      "id": 165,
                      "initialValue": {
                        "arguments": [
                          {
                            "hexValue": "",
                            "id": 163,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "642:2:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            },
                            "value": ""
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 157,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -15,
                                    "src": "611:3:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 158,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "615:6:2",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "611:10:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 156,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "603:8:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_payable_$",
                                  "typeString": "type(address payable)"
                                },
                                "typeName": {
                                  "id": 155,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "603:8:2",
                                  "stateMutability": "payable",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 159,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "603:19:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "id": 160,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "623:4:2",
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "src": "603:24:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 162,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "names": [
                            "value"
                          ],
                          "nodeType": "FunctionCallOptions",
                          "options": [
                            {
                              "id": 161,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 134,
                              "src": "634:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "src": "603:38:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                            "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                          }
                        },
                        "id": 164,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "603:42:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "tuple(bool,bytes memory)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "584:61:2"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 167,
                            "name": "success",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 154,
                            "src": "663:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "5749544844524157414c204641494c4544",
                            "id": 168,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "672:19:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_18d23a4f2dd23cb470cd1da6ab0e8592ec1dff39975885b398b659949660898a",
                              "typeString": "literal_string \"WITHDRAWAL FAILED\""
                            },
                            "value": "WITHDRAWAL FAILED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_18d23a4f2dd23cb470cd1da6ab0e8592ec1dff39975885b398b659949660898a",
                              "typeString": "literal_string \"WITHDRAWAL FAILED\""
                            }
                          ],
                          "id": 166,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "655:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 169,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "655:37:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 170,
                      "nodeType": "ExpressionStatement",
                      "src": "655:37:2"
                    },
                    {
                      "expression": {
                        "id": 178,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 171,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 112,
                            "src": "703:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 174,
                          "indexExpression": {
                            "expression": {
                              "id": 172,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "712:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 173,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "716:6:2",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "712:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "703:20:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 177,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 175,
                            "name": "usersBalance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 140,
                            "src": "726:12:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 176,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 134,
                            "src": "741:6:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "726:21:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "703:44:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 179,
                      "nodeType": "ExpressionStatement",
                      "src": "703:44:2"
                    }
                  ]
                },
                "functionSelector": "2e1a7d4d",
                "id": 181,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 137,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 136,
                      "name": "nonReentrant",
                      "nameLocations": [
                        "445:12:2"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 38,
                      "src": "445:12:2"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "445:12:2"
                  }
                ],
                "name": "withdraw",
                "nameLocation": "413:8:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 135,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 134,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "430:6:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 181,
                      "src": "422:14:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 133,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "422:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "421:16:2"
                },
                "returnParameters": {
                  "id": 138,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "457:0:2"
                },
                "scope": 215,
                "src": "404:350:2",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 201,
                  "nodeType": "Block",
                  "src": "813:80:2",
                  "statements": [
                    {
                      "expression": {
                        "id": 193,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 188,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 112,
                            "src": "823:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 191,
                          "indexExpression": {
                            "expression": {
                              "id": 189,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "832:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 190,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "836:6:2",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "832:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "823:20:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "-=",
                        "rightHandSide": {
                          "id": 192,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 185,
                          "src": "847:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "823:30:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 194,
                      "nodeType": "ExpressionStatement",
                      "src": "823:30:2"
                    },
                    {
                      "expression": {
                        "id": 199,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 195,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 112,
                            "src": "863:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 197,
                          "indexExpression": {
                            "id": 196,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 183,
                            "src": "872:2:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "863:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "id": 198,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 185,
                          "src": "879:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "863:22:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 200,
                      "nodeType": "ExpressionStatement",
                      "src": "863:22:2"
                    }
                  ]
                },
                "functionSelector": "a9059cbb",
                "id": 202,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "transfer",
                "nameLocation": "769:8:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 186,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 183,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "786:2:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 202,
                      "src": "778:10:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 182,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "778:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 185,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "798:6:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 202,
                      "src": "790:14:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 184,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "790:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "777:28:2"
                },
                "returnParameters": {
                  "id": 187,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "813:0:2"
                },
                "scope": 215,
                "src": "760:133:2",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 213,
                  "nodeType": "Block",
                  "src": "963:38:2",
                  "statements": [
                    {
                      "expression": {
                        "baseExpression": {
                          "id": 209,
                          "name": "balances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 112,
                          "src": "980:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 211,
                        "indexExpression": {
                          "id": 210,
                          "name": "user",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 204,
                          "src": "989:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "980:14:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 208,
                      "id": 212,
                      "nodeType": "Return",
                      "src": "973:21:2"
                    }
                  ]
                },
                "functionSelector": "f8b2cb4f",
                "id": 214,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getBalance",
                "nameLocation": "909:10:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 205,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 204,
                      "mutability": "mutable",
                      "name": "user",
                      "nameLocation": "928:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 214,
                      "src": "920:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 203,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "920:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "919:14:2"
                },
                "returnParameters": {
                  "id": 208,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 207,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 214,
                      "src": "955:7:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 206,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "955:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "954:9:2"
                },
                "scope": 215,
                "src": "900:101:2",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "public"
              }
            ],
            "scope": 216,
            "src": "150:853:2",
            "usedErrors": []
          }
        ],
        "src": "39:964:2"
      }
    }
  },
  "errors": [],
  "version": "0.8.18",
  "long_version": "0.8.18+commit.87f61d96.Darwin.appleclang",
  "zk_version": "1.4.1"
}