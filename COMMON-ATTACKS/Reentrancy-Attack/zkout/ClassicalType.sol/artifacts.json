{
  "contracts": {
    "src/Classical-Type/ClassicalType.sol": {
      "ClassicalType": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "name": "balances",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "deposit",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "getBalance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "jump_table_density_threshold": null,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Classical-Type/ClassicalType.sol\":\"ClassicalType\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/Classical-Type/ClassicalType.sol\":{\"keccak256\":\"0xa8fe0055e5899391d8c56ebfa7fb0478c1ebd5cb594d8b0425d2206bc18f69d8\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://45992ba1c9228aef9e083def8d598c50889cc215efdfce87e13d80c31db61dd5\",\"dweb:/ipfs/QmNndpXk6R6cCB3PL72kFP8ozrcdLuNTewjMGzqmV6Ne7c\"]}},\"version\":1}",
          "solc_version": "0.8.18",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.1"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"ClassicalType.sol:ClassicalType\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[1]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.gt\t@.BB0_8\n\tsub.s!\t@CPI0_5[0], r2, r4\n\tjump.eq\t@.BB0_10\n\tsub.s!\t@CPI0_6[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_16[0], r1, r2\n\tjump.gt\t@.BB0_2\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_17[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_8:\n\tsub.s!\t@CPI0_3[0], r2, r1\n\tjump.eq\t@.BB0_17\n\tsub.s!\t@CPI0_4[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.caller\tr1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_7[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r2\n\tcontext.get_context_u128\tr3\n\tadd\tr3, r2, r2\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tsub.s!\t1, r3, r3\n\tjump.ne\t@.BB0_39\n\tadd\t@CPI0_8[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_9[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_10:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tcontext.this\tr1\n\tnear_call\tr0, @__system_request, @DEFAULT_UNWIND\n\tst.1\t128, r1\n\tadd\t@CPI0_17[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_17:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[1]\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_7[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r3\n\tsub!\tr3, r0, r1\n\tjump.ne\t@.BB0_20\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_39:\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_20:\n\tcontext.gas_left\tr1\n\tadd\tstack-[1], r0, r4\n\tsub.s!\t4, r4, r2\n\tjump.ne\t@.BB0_21\n\tadd\t1, r0, r2\n\tadd\tstack[@returndatasize], r0, r1\n\tjump\t@.BB0_23\n.BB0_21:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_10[0], r1, r1\n\tadd\t32777, r0, r2\n\tadd\tr0, r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r4\n\tand\t1, r2, r2\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, stack[@returndatasize]\n\tand\t@CPI0_0[0], r1, r1\n.BB0_23:\n\tsub!\tr1, r0, r3\n\tjump.ne\t@.BB0_25\n.BB0_24:\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_35\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_13[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t20, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_14[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_15[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_25:\n\tsub.s!\t@CPI0_11[0], r1, r3\n\tjump.ge\t@.BB0_26\n\tadd\t31, r1, r3\n\tsub.s\t32, r0, r5\n\tand\tr3, r5, r3\n\tadd\t63, r3, r3\n\tand\tr3, r5, r3\n\tld.1\t64, r7\n\tadd\tr7, r3, r3\n\tsub!\tr3, r7, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_12[0], r3, r6\n\tjump.gt\t@.BB0_26\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_26\n\tst.1\t64, r3\n\tand\t31, r1, r3\n\tst.1.inc\tr7, r1, r9\n\tptr.add\tstack[@ptr_return_data], r0, r5\n\tshr.s!\t5, r1, r1\n\tjump.eq\t@.BB0_40\n\tadd\tr0, r0, r6\n.BB0_32:\n\tshl.s\t5, r6, r7\n\tadd\tr9, r7, r8\n\tptr.add\tr5, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r1, r7\n\tjump.lt\t@.BB0_32\n.BB0_40:\n\tsub!\tr3, r0, r6\n\tjump.eq\t@.BB0_24\n\tshl.s\t5, r1, r1\n\tptr.add\tr5, r1, r5\n\tadd\tr9, r1, r1\n\tshl.s\t3, r3, r3\n\tld.1\tr1, r6\n\tshl\tr6, r3, r6\n\tshr\tr6, r3, r6\n\tld\tr5, r5\n\tsub\t256, r3, r3\n\tshr\tr5, r3, r5\n\tshl\tr5, r3, r3\n\tor\tr3, r6, r3\n\tst.1\tr1, r3\n\tjump\t@.BB0_24\n.BB0_26:\n\tadd\t@CPI0_8[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_9[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_35:\n\tst.1\t0, r4\n\tst.1\t32, r0\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsstore\tr1, r0\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\n__cxa_throw:\n.func_begin1:\n\trevert\n.func_end1:\n\n__sha3:\n.func_begin2:\n\tadd\t@CPI2_0[0], r0, r2\n\tsub.s!\t@CPI2_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI2_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tshl.s\t192, r3, r2\n\tshl.s\t64, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI2_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB2_2\n\tld\tr1, r1\n\tret\n.BB2_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\n__system_request:\n.func_begin3:\n\tadd\t@CPI3_0[0], r0, r2\n\tst.2\t0, r2\n\tst.2\t4, r1\n\tadd\t@CPI3_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI3_1[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI3_2[0], r1, r1\n\tadd\t32778, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB3_2\n\tld\tr1, r1\n\tret\n.BB3_2:\n\trevert\n.func_end3:\n\n__farcall:\n.func_begin4:\n.tmp0:\n\tfar_call\tr1, r2, @.BB4_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB4_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end4:\n\n__staticcall:\n.func_begin5:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB5_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB5_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end5:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI2_0:\nCPI3_1:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 1020253706\nCPI0_3:\n\t.cell 1020253707\nCPI0_4:\n\t.cell 3504541104\nCPI0_5:\n\t.cell 302407648\nCPI0_6:\n\t.cell 669136355\nCPI0_7:\nCPI2_1:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_8:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_9:\n\t.cell 2852213850513516153367582212096\nCPI0_10:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_11:\n\t.cell 18446744073709551616\nCPI0_12:\n\t.cell 18446744073709551615\nCPI0_13:\n\t.cell 31834011171830534752912393390885353011711661642506317732200963893479440646144\nCPI0_14:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_15:\n\t.cell 7922816251426433759354395033600\nCPI0_16:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_17:\n\t.cell 2535301202817642044428229017600\nCPI3_0:\n\t.cell -44877977326897262784168444354156441158329539312518651612887364914072161059015\nCPI3_2:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\n",
          "bytecode": {
            "object": "0002000000000002000100000000000200000000030100190000006003300270000000420330019700010000003103550000008004000039000000400040043f0000000102200190000000250000c13d000000040230008c0000006a0000413d000000000201043b000000e002200270000000440420009c0000002d0000213d000000470420009c0000004d0000613d000000480220009c0000006a0000c13d0000000002000416000000240330008c0000006a0000413d000000000202004b0000006a0000c13d0000000401100370000000000101043b000000520210009c0000006a0000213d0000000000100435000000200000043f0000000001000019010300d70000040f000000000101041a000000800010043f0000005301000041000001040001042e0000000001000416000000000101004b0000006a0000c13d0000002001000039000001000010044300000120000004430000004301000041000001040001042e000000450120009c000000550000613d000000460120009c0000006a0000c13d00000000010004110000000000100435000000200000043f00000042010000410000000002000414000000420320009c0000000002018019000000c00120021000000049011001c70000801002000039010300fe0000040f00000001022001900000006a0000613d000000000101043b000000000201041a00000000030004160000000002230019000000000332004b00000000030000190000000103004039000000010330008c0000006c0000c13d0000004a0100004100000000001004350000001101000039000000040010043f0000004b0100004100000105000104300000000001000416000000000101004b0000006a0000c13d0000000001000410010300e90000040f000000800010043f0000005301000041000001040001042e0000000001000416000000000101004b0000006a0000c13d0000000001000411000100000001001d0000000000100435000000200000043f00000042010000410000000002000414000000420320009c0000000002018019000000c00120021000000049011001c70000801002000039010300fe0000040f00000001022001900000006a0000613d000000000101043b000000000301041a000000000103004b0000006f0000c13d00000000010000190000010500010430000000000021041b0000000001000019000001040001042e00000000010004140000000104000029000000040240008c000000760000c13d00000001020000390000000001000031000000840000013d0000004202000041000000420510009c0000000001028019000000c0011002100000004c011001c700008009020000390000000005000019010300f90000040f0000000104000029000000010220018f00010000000103550000006001100270000000420010019d0000004201100197000000000301004b0000009a0000c13d000000000102004b000000cf0000c13d000000400100043d00000044021000390000004f030000410000000000320435000000240210003900000014030000390000000000320435000000500200004100000000002104350000000402100039000000200300003900000000003204350000004202000041000000420310009c0000000001028019000000400110021000000051011001c700000105000104300000004d0310009c000000c90000813d0000001f03100039000000200500008a000000000353016f0000003f03300039000000000353016f000000400700043d0000000003370019000000000573004b000000000500001900000001050040390000004e0630009c000000c90000213d0000000105500190000000c90000c13d000000400030043f0000001f0310018f000000000917043600000001050003670000000501100272000000b90000613d000000000600001900000005076002100000000008790019000000000775034f000000000707043b00000000007804350000000106600039000000000716004b000000b10000413d000000000603004b000000860000613d0000000501100210000000000515034f00000000011900190000000303300210000000000601043300000000063601cf000000000636022f000000000505043b0000010003300089000000000535022f00000000033501cf000000000363019f0000000000310435000000860000013d0000004a0100004100000000001004350000004101000039000000040010043f0000004b0100004100000105000104300000000000400435000000200000043f0000000001000019010300d70000040f000000000001041b0000000001000019000001040001042e000000000001042f0000004202000041000000420310009c00000000010280190000000003000414000000420430009c0000000003028019000000c0023002100000004001100210000000000121019f00000049011001c70000801002000039010300fe0000040f0000000102200190000000e70000613d000000000101043b000000000001042d0000000001000019000001050001043000000054020000410000000000200439000000040010044300000042010000410000000002000414000000420320009c0000000002018019000000c00120021000000055011001c70000800a02000039010300fe0000040f0000000102200190000000f80000613d000000000101043b000000000001042d000000000001042f000000fc002104210000000102000039000000000001042d0000000002000019000000000001042d00000101002104230000000102000039000000000001042d0000000002000019000000000001042d0000010300000432000001040001042e00000105000104300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000200000000000000000000000000000040000001000000000000000000000000000000000000000000000000000000000000000000000000003ccfd60a000000000000000000000000000000000000000000000000000000003ccfd60b00000000000000000000000000000000000000000000000000000000d0e30db00000000000000000000000000000000000000000000000000000000012065fe00000000000000000000000000000000000000000000000000000000027e235e302000000000000000000000000000000000000400000000000000000000000004e487b7100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff4661696c656420746f2073656e6420457468657200000000000000000000000008c379a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000200000008000000000000000009cc7f708afc65944829bd487b90b72536b1951864fbfc14e125fc972a6507f3902000002000000000000000000000000000000240000000000000000000000003aa11b6ff4e130f72d9558ac27452bf8c29ba576b22216c8436c8c27f03f9eda"
          },
          "methodIdentifiers": {
            "balances(address)": "27e235e3",
            "deposit()": "d0e30db0",
            "getBalance()": "12065fe0",
            "withdraw()": "3ccfd60b"
          }
        },
        "irOptimized": "/// @use-src 0:\"src/Classical-Type/ClassicalType.sol\"\nobject \"ClassicalType_69\" {\n    code {\n        {\n            /// @src 0:64:581  \"contract ClassicalType {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"ClassicalType_69_deployed\")\n            codecopy(_1, dataoffset(\"ClassicalType_69_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"src/Classical-Type/ClassicalType.sol\"\n    object \"ClassicalType_69_deployed\" {\n        code {\n            {\n                /// @src 0:64:581  \"contract ClassicalType {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x12065fe0 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        mstore(_1, /** @src 0:551:572  \"address(this).balance\" */ selfbalance())\n                        /// @src 0:64:581  \"contract ClassicalType {...\"\n                        return(_1, 32)\n                    }\n                    case 0x27e235e3 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let value := calldataload(_3)\n                        let _5 := and(value, sub(shl(160, 1), 1))\n                        if iszero(eq(value, _5)) { revert(_4, _4) }\n                        mstore(_4, _5)\n                        mstore(32, _4)\n                        let _6 := sload(keccak256(_4, _2))\n                        let memPos := mload(_2)\n                        mstore(memPos, _6)\n                        return(memPos, 32)\n                    }\n                    case 0x3ccfd60b {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        mstore(_4, /** @src 0:293:303  \"msg.sender\" */ caller())\n                        /// @src 0:64:581  \"contract ClassicalType {...\"\n                        mstore(0x20, _4)\n                        let _7 := sload(keccak256(_4, _2))\n                        if /** @src 0:322:329  \"bal > 0\" */ iszero(_7)\n                        /// @src 0:64:581  \"contract ClassicalType {...\"\n                        { revert(_4, _4) }\n                        /// @src 0:356:387  \"msg.sender.call{value: bal}(\\\"\\\")\"\n                        let expr_component := call(gas(), /** @src 0:293:303  \"msg.sender\" */ caller(), /** @src 0:356:387  \"msg.sender.call{value: bal}(\\\"\\\")\" */ _7, /** @src 0:64:581  \"contract ClassicalType {...\" */ _4, _4, _4, _4)\n                        switch returndatasize()\n                        case 0 { }\n                        default {\n                            let _8 := returndatasize()\n                            let _9 := 0xffffffffffffffff\n                            if gt(_8, _9)\n                            {\n                                mstore(_4, shl(224, 0x4e487b71))\n                                mstore(_3, 0x41)\n                                revert(_4, 0x24)\n                            }\n                            let _10 := not(31)\n                            let memPtr := mload(_2)\n                            let newFreePtr := add(memPtr, and(add(and(add(_8, 31), _10), 63), _10))\n                            if or(gt(newFreePtr, _9), lt(newFreePtr, memPtr))\n                            {\n                                mstore(_4, shl(224, 0x4e487b71))\n                                mstore(_3, 0x41)\n                                revert(_4, 0x24)\n                            }\n                            mstore(_2, newFreePtr)\n                            mstore(memPtr, _8)\n                            returndatacopy(add(memPtr, 0x20), _4, returndatasize())\n                        }\n                        if iszero(expr_component)\n                        {\n                            let memPtr_1 := mload(_2)\n                            mstore(memPtr_1, shl(229, 4594637))\n                            mstore(add(memPtr_1, _3), 0x20)\n                            mstore(add(memPtr_1, 36), 20)\n                            mstore(add(memPtr_1, 68), \"Failed to send Ether\")\n                            revert(memPtr_1, 100)\n                        }\n                        mstore(_4, /** @src 0:293:303  \"msg.sender\" */ caller())\n                        /// @src 0:64:581  \"contract ClassicalType {...\"\n                        mstore(0x20, _4)\n                        sstore(keccak256(_4, _2), _4)\n                        return(_4, _4)\n                    }\n                    case 0xd0e30db0 {\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        mstore(_4, /** @src 0:196:206  \"msg.sender\" */ caller())\n                        /// @src 0:64:581  \"contract ClassicalType {...\"\n                        mstore(0x20, _4)\n                        let dataSlot := keccak256(_4, _2)\n                        let _11 := sload(/** @src 0:187:220  \"balances[msg.sender] += msg.value\" */ dataSlot)\n                        /// @src 0:64:581  \"contract ClassicalType {...\"\n                        let sum := add(_11, /** @src 0:211:220  \"msg.value\" */ callvalue())\n                        /// @src 0:64:581  \"contract ClassicalType {...\"\n                        if gt(_11, sum)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x11)\n                            revert(_4, 0x24)\n                        }\n                        sstore(dataSlot, sum)\n                        return(_4, _4)\n                    }\n                }\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212206d76767c550ff9e80d9d091b4664f8af9f17c09e80093e98ea450c34fad8593564736f6c63430008120033\"\n    }\n}\n",
        "hash": "010000571042d1230e644e4a0e46dd63e72e6283588cf2ba66cd18cbde1b9e15",
        "factoryDependencies": {}
      }
    }
  },
  "sources": {
    "src/Classical-Type/ClassicalType.sol": {
      "id": 0,
      "ast": {
        "absolutePath": "src/Classical-Type/ClassicalType.sol",
        "exportedSymbols": {
          "ClassicalType": [
            69
          ]
        },
        "id": 70,
        "license": "UNLICENSED",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "0.8",
              ".18"
            ],
            "nodeType": "PragmaDirective",
            "src": "39:23:0"
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "ClassicalType",
            "contractDependencies": [],
            "contractKind": "contract",
            "fullyImplemented": true,
            "id": 69,
            "linearizedBaseContracts": [
              69
            ],
            "name": "ClassicalType",
            "nameLocation": "73:13:0",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "functionSelector": "27e235e3",
                "id": 5,
                "mutability": "mutable",
                "name": "balances",
                "nameLocation": "128:8:0",
                "nodeType": "VariableDeclaration",
                "scope": 69,
                "src": "93:43:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 4,
                  "keyName": "",
                  "keyNameLocation": "-1:-1:-1",
                  "keyType": {
                    "id": 2,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "101:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "93:27:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueName": "",
                  "valueNameLocation": "-1:-1:-1",
                  "valueType": {
                    "id": 3,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "112:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "visibility": "public"
              },
              {
                "body": {
                  "id": 16,
                  "nodeType": "Block",
                  "src": "177:50:0",
                  "statements": [
                    {
                      "expression": {
                        "id": 14,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 8,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "187:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 11,
                          "indexExpression": {
                            "expression": {
                              "id": 9,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "196:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 10,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "200:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "196:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "187:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "expression": {
                            "id": 12,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "211:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 13,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "215:5:0",
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "211:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "187:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 15,
                      "nodeType": "ExpressionStatement",
                      "src": "187:33:0"
                    }
                  ]
                },
                "functionSelector": "d0e30db0",
                "id": 17,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "deposit",
                "nameLocation": "152:7:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 6,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "159:2:0"
                },
                "returnParameters": {
                  "id": 7,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "177:0:0"
                },
                "scope": 69,
                "src": "143:84:0",
                "stateMutability": "payable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 55,
                  "nodeType": "Block",
                  "src": "260:216:0",
                  "statements": [
                    {
                      "assignments": [
                        21
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 21,
                          "mutability": "mutable",
                          "name": "bal",
                          "nameLocation": "278:3:0",
                          "nodeType": "VariableDeclaration",
                          "scope": 55,
                          "src": "270:11:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 20,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "270:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 26,
                      "initialValue": {
                        "baseExpression": {
                          "id": 22,
                          "name": "balances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5,
                          "src": "284:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 25,
                        "indexExpression": {
                          "expression": {
                            "id": 23,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "293:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 24,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "297:6:0",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "293:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "284:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "270:34:0"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 30,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 28,
                              "name": "bal",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 21,
                              "src": "322:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 29,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "328:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "322:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 27,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "314:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 31,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "314:16:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 32,
                      "nodeType": "ExpressionStatement",
                      "src": "314:16:0"
                    },
                    {
                      "assignments": [
                        34,
                        null
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 34,
                          "mutability": "mutable",
                          "name": "sent",
                          "nameLocation": "347:4:0",
                          "nodeType": "VariableDeclaration",
                          "scope": 55,
                          "src": "342:9:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 33,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "342:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        },
                        null
                      ],
                      "id": 42,
                      "initialValue": {
                        "arguments": [
                          {
                            "hexValue": "",
                            "id": 40,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "384:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            },
                            "value": ""
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "expression": {
                                "id": 35,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "356:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 36,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "360:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "356:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 37,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "367:4:0",
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "src": "356:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 39,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "names": [
                            "value"
                          ],
                          "nodeType": "FunctionCallOptions",
                          "options": [
                            {
                              "id": 38,
                              "name": "bal",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 21,
                              "src": "379:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "src": "356:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                            "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                          }
                        },
                        "id": 41,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "356:31:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "tuple(bool,bytes memory)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "341:46:0"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 44,
                            "name": "sent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 34,
                            "src": "405:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "4661696c656420746f2073656e64204574686572",
                            "id": 45,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "411:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb",
                              "typeString": "literal_string \"Failed to send Ether\""
                            },
                            "value": "Failed to send Ether"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb",
                              "typeString": "literal_string \"Failed to send Ether\""
                            }
                          ],
                          "id": 43,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "397:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 46,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "397:37:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 47,
                      "nodeType": "ExpressionStatement",
                      "src": "397:37:0"
                    },
                    {
                      "expression": {
                        "id": 53,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 48,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "445:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 51,
                          "indexExpression": {
                            "expression": {
                              "id": 49,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "454:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 50,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "458:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "454:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "445:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "hexValue": "30",
                          "id": 52,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "468:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "445:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 54,
                      "nodeType": "ExpressionStatement",
                      "src": "445:24:0"
                    }
                  ]
                },
                "functionSelector": "3ccfd60b",
                "id": 56,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "withdraw",
                "nameLocation": "242:8:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 18,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "250:2:0"
                },
                "returnParameters": {
                  "id": 19,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "260:0:0"
                },
                "scope": 69,
                "src": "233:243:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 67,
                  "nodeType": "Block",
                  "src": "534:45:0",
                  "statements": [
                    {
                      "expression": {
                        "expression": {
                          "arguments": [
                            {
                              "id": 63,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "559:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ClassicalType_$69",
                                "typeString": "contract ClassicalType"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_ClassicalType_$69",
                                "typeString": "contract ClassicalType"
                              }
                            ],
                            "id": 62,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "551:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 61,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "551:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 64,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "551:13:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 65,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "565:7:0",
                        "memberName": "balance",
                        "nodeType": "MemberAccess",
                        "src": "551:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 60,
                      "id": 66,
                      "nodeType": "Return",
                      "src": "544:28:0"
                    }
                  ]
                },
                "functionSelector": "12065fe0",
                "id": 68,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getBalance",
                "nameLocation": "491:10:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 57,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "501:2:0"
                },
                "returnParameters": {
                  "id": 60,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 59,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 68,
                      "src": "525:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 58,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "525:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "524:9:0"
                },
                "scope": 69,
                "src": "482:97:0",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "public"
              }
            ],
            "scope": 70,
            "src": "64:517:0",
            "usedErrors": []
          }
        ],
        "src": "39:543:0"
      }
    }
  },
  "errors": [],
  "version": "0.8.18",
  "long_version": "0.8.18+commit.87f61d96.Darwin.appleclang",
  "zk_version": "1.4.1"
}